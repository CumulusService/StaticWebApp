@page "/"

@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components.Forms

@inject HttpClient Http
@inject NavigationManager NavigationManager

@implements IDisposable

<PageTitle>File Upload</PageTitle>

<div class="upload-container">
  <div class="upload-card">

    @* --- FINAL STATUS (after upload completes) --- *@
    @if (isUploadComplete)
    {
      <div class="final-status">
        <div class="status-message @GetStatusClass()">
          <div class="status-icon">
            @if (Status.Contains("✅"))
            {
              <!-- Green checkmark -->
              <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <polyline points="20 6 9 17 4 12" />
              </svg>
            }
            else
            {
              <!-- Red X -->
              <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <circle cx="12" cy="12" r="10" />
                <line x1="15" y1="9" x2="9" y2="15" />
                <line x1="9" y1="9" x2="15" y2="15" />
              </svg>
            }
          </div>
          <span>@Status.Trim('✅','❌').Trim()</span>
        </div>
      </div>
    }
    else
    {
      @* --- UPLOAD HEADER (logo, title, user info) --- *@
      <div class="upload-header">
        <div class="logo-container">
          <img src="data:image/png;base64,...YOUR_LOGO_BASE64_HERE..." 
               class="company-logo" alt="Company Logo" />
        </div>
        <h1 class="upload-title">Upload Your File</h1>

        @* Show user email if we parsed it from the query string *@
        @if (!string.IsNullOrEmpty(Email))
        {
          <div class="user-info">
            <span class="user-icon">👤</span>
            <span class="user-email">@Email</span>
          </div>
        }
      </div>

      @* --- DRAG/DROP OR CLICK ZONE --- *@
      <div class="upload-zone">
        <InputFile OnChange="OnFileSelected"
                   accept="*/*"
                   style="position:absolute; top:0; left:0;
                          width:100%; height:100%;
                          opacity:0; cursor:pointer;" />

        @if (selectedFile is null)
        {
          <div class="upload-placeholder">
            <div class="upload-icon-large">
              <!-- Cloud upload icon -->
              <svg width="64" height="64" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5">
                <path d="M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z" />
                <polyline points="14 2 14 8 20 8" />
                <line x1="12" y1="18" x2="12" y2="12" />
                <polyline points="9 15 12 12 15 15" />
              </svg>
            </div>
            <h3>Drop your file here or click to browse</h3>
            <p>Supports files up to 10 MB</p>
          </div>
        }
        else
        {
          @* --- FILE PREVIEW BEFORE UPLOAD --- *@
          <div class="file-preview">
            <div class="file-icon">
              <!-- Document icon -->
              <svg width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z" />
                <polyline points="14 2 14 8 20 8" />
              </svg>
            </div>
            <div class="file-info">
              <div class="file-name">@selectedFile.Name</div>
              <div class="file-size">@FormatFileSize(selectedFile.Size)</div>
            </div>
            <button class="remove-file" @onclick="RemoveFile">
              <!-- X icon to remove -->
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <line x1="18" y1="6" x2="6" y2="18" />
                <line x1="6" y1="6" x2="18" y2="15" />
              </svg>
            </button>
          </div>
        }
      </div>

      @* --- UPLOAD BUTTON AND SPINNER --- *@
      <div class="upload-actions">
        <button class="upload-btn @(CanUpload ? "enabled":"disabled")"
                @onclick="SubmitFile"
                disabled="@(!CanUpload)">
          @if (isUploading)
          {
            <div class="spinner"></div>
            <span>Uploading…</span>
          }
          else
          {
            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4" />
              <polyline points="17 8 12 3 7 8" />
              <line x1="12" y1="3" x2="12" y2="15" />
            </svg>
            <span>Upload File</span>
          }
        </button>
      </div>

      @* --- STATUS MESSAGE WHILE UPLOADING or ON ERROR --- *@
      @if (!string.IsNullOrEmpty(Status))
      {
        <div class="status-message @GetStatusClass()">
          <div class="status-icon">
            @if (Status.Contains("✅"))
            {
              <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <polyline points="20 6 9 17 4 12" />
              </svg>
            }
            else if (Status.Contains("❌"))
            {
              <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <circle cx="12" cy="12" r="10" />
                <line x1="15" y1="9" x2="9" y2="15" />
                <line x1="9" y1="9" x2="15" y2="15" />
              </svg>
            }
            else
            {
              <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <circle cx="12" cy="12" r="10" />
                <line x1="12" y1="8" x2="12" y2="12" />
                <line x1="12" y1="16" x2="12.01" y2="16" />
              </svg>
            }
          </div>
          <span>@Status.Trim('✅','❌').Trim()</span>
        </div>
      }
    }
  </div>
</div>

<style>
  /* … your existing CSS … */
</style>

@code {
  private string Email = "";
  private string Token = "";
  private IBrowserFile? selectedFile;
  private bool isUploading;
  private bool isUploadComplete;
  private string Status = "";

  private bool CanUpload => selectedFile != null && !isUploading && !isUploadComplete;

  protected override void OnInitialized()
  {
    // Manual query‐string parsing (no WebUtilities)
    var uri = new Uri(NavigationManager.Uri);
    var parts = uri.Query.TrimStart('?')
                   .Split('&', StringSplitOptions.RemoveEmptyEntries)
                   .Select(p => p.Split('=', 2))
                   .ToDictionary(
                     kv => Uri.UnescapeDataString(kv[0]),
                     kv => kv.Length > 1 ? Uri.UnescapeDataString(kv[1]) : ""
                   );

    if (parts.TryGetValue("email", out var e)) Email = e;
    if (parts.TryGetValue("token", out var t)) Token = t;
  }

  private void OnFileSelected(InputFileChangeEventArgs e)
  {
    selectedFile = e.File;
    Status = "";
  }

  private Task RemoveFile()
  {
    if (!isUploadComplete)
    {
      selectedFile = null;
      Status = "";
    }
    return Task.CompletedTask;
  }

  private string FormatFileSize(long bytes)
  {
    string[] sizes = { "B", "KB", "MB", "GB" };
    double len = bytes; int order = 0;
    while (len >= 1024 && order < sizes.Length - 1)
    {
      len /= 1024; order++;
    }
    return $"{len:0.##} {sizes[order]}";
  }

  private string GetStatusClass() =>
    Status.Contains("✅") ? "success" :
    Status.Contains("❌") ? "error" : "info";

  private async Task SubmitFile()
  {
    if (selectedFile == null)
    {
      Status = "❌ No file selected";
      return;
    }
    if (selectedFile.Size > 10 * 1024 * 1024)
    {
      Status = "❌ File too large. Max 10 MB.";
      return;
    }

    isUploading = true;
    Status = "Uploading…";

    try
    {
      using var stream = selectedFile.OpenReadStream(10 * 1024 * 1024);
      using var ms = new MemoryStream();
      await stream.CopyToAsync(ms);
      var bytes = ms.ToArray();

      var content = new MultipartFormDataContent
      {
        { new ByteArrayContent(bytes), "file", selectedFile.Name },
        { new StringContent(Email),    "email" },
        { new StringContent(Token),    "token" }
      };

      var response = await Http.PostAsync("/api/upload", content);
      if (response.IsSuccessStatusCode)
      {
        Status = "✅ Upload successful!";
        isUploadComplete = true;
      }
      else
      {
        Status = $"❌ Error: {response.StatusCode}";
      }
    }
    catch (Exception ex)
    {
      Status = $"❌ Error: {ex.Message}";
    }
    finally
    {
      isUploading = false;
    }
  }

  public void Dispose() { }
}
